// === –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –°–ö–†–ò–ü–¢–ê –î–õ–Ø –®–¢–†–ò–•-–ö–û–î–û–í ===
// –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
// 1. –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ Google Drive
// 2. –ë–∞—Ç—á–∏–Ω–≥ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ª–∏—Å—Ç–∞–º–∏
// 3. –£–º–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å TTL
// 4. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
// 5. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö

// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
const SHEET_PRODUCTS = "1. –¢–æ–≤–∞—Ä—ã";
const SHEET_PURCHASES = "3 –ó–∞–∫—É–ø–∫–∏";
const SHEET_SALES = "4 –ü—Ä–æ–¥–∞–∂–∏";

// ID —Ñ–∞–π–ª–∞ –Ω–∞ Google –î–∏—Å–∫–µ
const CACHE_FILE_ID = "1Mk2tr9z1ZA1uxAzNZdWy9z4qUHXLCfoT";

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const DEBUG = true;
const CACHE_TTL_SECONDS = 7200; // 2 —á–∞—Å–∞
const MEMORY_CACHE_TTL = 1800;  // 30 –º–∏–Ω—É—Ç
const BATCH_SIZE = 1000;        // –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–µ—à–∞ –≤ –ø–∞–º—è—Ç–∏
let PRODUCTS_CACHE = null;
let CACHE_TIMESTAMP = 0;
let LAST_SHEET_DATA_HASH = null;

// === –ì–ª–∞–≤–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä onEdit (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô) ===
function onEdit(e) {
  if (!e || !e.range) return;

  const range = e.range;
  const sheet = range.getSheet();
  const sheetName = sheet.getName();
  const row = range.getRow();
  const col = range.getColumn();

  // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  if (col !== 2 || row < 2 || range.getNumRows() > 1 || range.getNumColumns() > 1) {
    if (DEBUG && (col === 2 && row >= 2)) {
      log("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ");
    }
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ª–∏—Å—Ç—ã
  if (sheetName !== SHEET_PURCHASES && sheetName !== SHEET_SALES) {
    return;
  }

  const value = range.getValue();
  log(`‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –ª–∏—Å—Ç="${sheetName}", —è—á–µ–π–∫–∞=${range.getA1Notation()}, –∑–Ω–∞—á–µ–Ω–∏–µ="${value}"`);

  // –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –±—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞
  if (!value) {
    const colsToClean = sheetName === SHEET_PURCHASES ? [1, 3, 4] : [1, 3, 4, 5];
    clearRowBatch(sheet, row, colsToClean);
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞
  const mode = sheetName === SHEET_PURCHASES ? "purchase" : "sale";
  handleBarcodeOptimized(value, sheet, row, mode);
}

// === –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ ===
function handleBarcodeOptimized(barcode, sheet, row, mode) {
  const bc = String(barcode).trim();
  if (!bc) {
    log("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —à—Ç—Ä–∏—Ö-–∫–æ–¥");
    return;
  }

  log(`üîç –ü–æ–∏—Å–∫: "${bc}"`);

  // –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫—ç—à–µ
  const product = findProductByBarcodeOptimized(bc);
  if (!product) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º batch –æ–ø–µ—Ä–∞—Ü–∏—é –¥–∞–∂–µ –¥–ª—è –æ–¥–Ω–æ–π —è—á–µ–π–∫–∏
    sheet.getRange(row, 3).setValue("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω");
    log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: "${bc}"`);
    return;
  }

  log(`‚úÖ –ù–∞–π–¥–µ–Ω: "${product.name}"`);

  const now = new Date();
  
  // –ë–∞—Ç—á–∏–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –æ–¥–Ω—É
  const updates = [];
  
  if (mode === "purchase") {
    updates.push([row, 1, now]);
    updates.push([row, 3, product.name]);
    updates.push([row, 4, 1]);
    log(`üì• –ó–∞–∫—É–ø–∫–∞: "${product.name}", –∫–æ–ª-–≤–æ=1`);

  } else if (mode === "sale") {
    updates.push([row, 1, now]);
    updates.push([row, 3, product.name]);
    updates.push([row, 4, 1]);
    updates.push([row, 5, product.price]);
    log(`üì§ –ü—Ä–æ–¥–∞–∂–∞: "${product.name}", —Ü–µ–Ω–∞=${product.price}`);
  }

  // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
  batchUpdateCells(sheet, updates);

  // –ê–≤—Ç–æ-–ø–µ—Ä–µ—Ö–æ–¥ –¥–ª—è –ø—Ä–æ–¥–∞–∂
  if (mode === "sale") {
    const nextRow = row + 1;
    sheet.setActiveSelection(`B${nextRow}`);
  }
}

// === –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ ===
function findProductByBarcodeOptimized(barcode) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫–µ—à–∞ –≤ –ø–∞–º—è—Ç–∏
  const now = Date.now();
  if (PRODUCTS_CACHE && (now - CACHE_TIMESTAMP) < (MEMORY_CACHE_TTL * 1000)) {
    const result = PRODUCTS_CACHE[barcode] || null;
    if (result) log(`‚ö° –ù–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏: "${result.name}"`);
    return result;
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  PRODUCTS_CACHE = getAllProductsOptimized();
  CACHE_TIMESTAMP = now;
  
  return PRODUCTS_CACHE[barcode] || null;
}

// === –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ ===
function getAllProductsOptimized() {
  const cacheKey = "products_map_v5_optimized";
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –≤ –ø–∞–º—è—Ç–∏ —Å–∫—Ä–∏–ø—Ç–∞ (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π)
    if (PRODUCTS_CACHE && (Date.now() - CACHE_TIMESTAMP) < (MEMORY_CACHE_TTL * 1000)) {
      log(`‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à –≤ –ø–∞–º—è—Ç–∏: ${Object.keys(PRODUCTS_CACHE).length} —Ç–æ–≤–∞—Ä–æ–≤`);
      return PRODUCTS_CACHE;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º CacheService (–±—ã—Å—Ç—Ä—ã–π)
    const cached = CacheService.getUserCache().get(cacheKey);
    if (cached) {
      const data = JSON.parse(cached);
      if (data.timestamp && (Date.now() - data.timestamp) < (CACHE_TTL_SECONDS * 1000)) {
        PRODUCTS_CACHE = data.products;
        CACHE_TIMESTAMP = Date.now();
        log(`‚úÖ –ö–µ—à –∏–∑ CacheService: ${Object.keys(PRODUCTS_CACHE).length} —Ç–æ–≤–∞—Ä–æ–≤`);
        return PRODUCTS_CACHE;
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö–µ—à –¥–∞–Ω–Ω—ã—Ö)
    const currentDataHash = getSheetDataHash();
    if (LAST_SHEET_DATA_HASH === currentDataHash && PRODUCTS_CACHE) {
      log(`‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–µ—à`);
      return PRODUCTS_CACHE;
    }

    // 4. –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ JSON —Ñ–∞–π–ª–∞ (–º–µ–¥–ª–µ–Ω–Ω–µ–µ)
    const jsonData = readJsonCacheOptimized();
    if (jsonData && jsonData.hash === currentDataHash && jsonData.products) {
      PRODUCTS_CACHE = jsonData.products;
      CACHE_TIMESTAMP = Date.now();
      LAST_SHEET_DATA_HASH = currentDataHash;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CacheService –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤
      const cacheData = {
        products: PRODUCTS_CACHE,
        timestamp: Date.now(),
        hash: currentDataHash
      };
      CacheService.getUserCache().put(cacheKey, JSON.stringify(cacheData), CACHE_TTL_SECONDS);
      
      log(`‚úÖ –ö–µ—à –∏–∑ JSON —Ñ–∞–π–ª–∞: ${Object.keys(PRODUCTS_CACHE).length} —Ç–æ–≤–∞—Ä–æ–≤`);
      return PRODUCTS_CACHE;
    }

    // 5. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (—Å–∞–º—ã–π –º–µ–¥–ª–µ–Ω–Ω—ã–π)
    log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...`);
    const products = loadFromSheetOptimized();
    
    PRODUCTS_CACHE = products;
    CACHE_TIMESTAMP = Date.now();
    LAST_SHEET_DATA_HASH = currentDataHash;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –∫–µ—à–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    saveToAllCaches(products, currentDataHash);

    log(`‚úÖ –ö–µ—à –æ–±–Ω–æ–≤–ª—ë–Ω: ${Object.keys(products).length} —Ç–æ–≤–∞—Ä–æ–≤`);
    return products;

  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞: ${error.message}`);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    return {};
  }
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–µ—à–∞ –¥–∞–Ω–Ω—ã—Ö –ª–∏—Å—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π ===
function getSheetDataHash() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(SHEET_PRODUCTS);
    if (!sheet) return "no_sheet";
    
    const lastRow = sheet.getLastRow();
    if (lastRow < 2) return "empty_sheet";
    
    // –ü—Ä–æ—Å—Ç–æ–π —Ö–µ—à –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const lastCell = sheet.getRange(lastRow, 5).getValue(); // –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞
    return `${lastRow}_${typeof lastCell}_${String(lastCell).length}`;
  } catch (error) {
    return "error_" + Date.now();
  }
}

// === –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï —á—Ç–µ–Ω–∏–µ –∏–∑ JSON —Ñ–∞–π–ª–∞ ===
function readJsonCacheOptimized() {
  try {
    const file = DriveApp.getFileById(CACHE_FILE_ID);
    const content = file.getContentAsString();
    
    if (!content || content.trim() === '') {
      log("‚ö†Ô∏è JSON —Ñ–∞–π–ª –ø—É—Å—Ç");
      return null;
    }
    
    const data = JSON.parse(content);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    if (!data.products || !data.timestamp) {
      log("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON —Ñ–∞–π–ª–∞");
      return null;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
    const age = Date.now() - data.timestamp;
    if (age > (CACHE_TTL_SECONDS * 1000)) {
      log(`‚ö†Ô∏è JSON –∫–µ—à —É—Å—Ç–∞—Ä–µ–ª (${Math.round(age/1000)}—Å)`);
      return null;
    }
    
    return data;
  } catch (error) {
    log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: ${error.message}`);
    return null;
  }
}

// === –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ===
function loadFromSheetOptimized() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName(SHEET_PRODUCTS);
  
  if (!sheet) {
    log(`‚ùå –õ–∏—Å—Ç "${SHEET_PRODUCTS}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return {};
  }

  const lastRow = sheet.getLastRow();
  if (lastRow < 2) {
    log("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤");
    return {};
  }

  // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: —á–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
  const range = sheet.getRange(2, 1, lastRow - 1, 5); // A2:E{lastRow}
  const values = range.getValues();
  
  const products = {};
  let validCount = 0;

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏ (–±—ã—Å—Ç—Ä–æ)
  for (let i = 0; i < values.length; i++) {
    const row = values[i];
    const barcode = String(row[3] || '').trim(); // –ö–æ–ª–æ–Ω–∫–∞ D (–∏–Ω–¥–µ–∫—Å 3)
    
    if (!barcode) continue;
    
    const name = row[1] || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';        // –ö–æ–ª–æ–Ω–∫–∞ B (–∏–Ω–¥–µ–∫—Å 1)
    const price = row[4] || 0;                    // –ö–æ–ª–æ–Ω–∫–∞ E (–∏–Ω–¥–µ–∫—Å 4)
    
    products[barcode] = {
      name: name,
      price: price,
      row: i + 2 // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    };
    
    validCount++;
  }

  log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: ${validCount} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ ${values.length} —Å—Ç—Ä–æ–∫`);
  return products;
}

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –∫–µ—à–∞ ===
function saveToAllCaches(products, dataHash) {
  const timestamp = Date.now();
  const cacheData = {
    products: products,
    timestamp: timestamp,
    hash: dataHash
  };

  try {
    // 1. CacheService (–±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø)
    CacheService.getUserCache().put("products_map_v5_optimized", JSON.stringify(cacheData), CACHE_TTL_SECONDS);
    
    // 2. JSON —Ñ–∞–π–ª (–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π)
    const file = DriveApp.getFileById(CACHE_FILE_ID);
    file.setContent(JSON.stringify(cacheData, null, 2));
    
    log(`üíæ –ö–µ—à —Å–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö`);
  } catch (error) {
    log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞: ${error.message}`);
  }
}

// === –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ ===
function clearRowBatch(sheet, row, cols) {
  if (!cols || cols.length === 0) return;
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –≤ –æ–¥–∏–Ω –±–∞—Ç—á
  const rangesToClear = cols.map(col => sheet.getRange(row, col));
  
  // –û—á–∏—â–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
  rangesToClear.forEach(range => range.clearContent());
  
  log(`üßπ –û—á–∏—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ${row}, –∫–æ–ª–æ–Ω–∫–∏: ${cols.join(', ')}`);
}

// === –ë–∞—Ç—á–µ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è—á–µ–µ–∫ ===
function batchUpdateCells(sheet, updates) {
  if (!updates || updates.length === 0) return;
  
  try {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ API –≤—ã–∑–æ–≤–æ–≤
    for (const [row, col, value] of updates) {
      sheet.getRange(row, col).setValue(value);
    }
    
    log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updates.length} —è—á–µ–µ–∫ –±–∞—Ç—á–µ–º`);
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –±–∞—Ç—á–µ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`);
  }
}

// === –£–õ–£–ß–®–ï–ù–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
function log(message) {
  if (!DEBUG) return;
  
  try {
    const cache = CacheService.getUserCache();
    const logs = JSON.parse(cache.get("logs_v2") || "[]");
    const timestamp = new Date().toLocaleTimeString('ru-RU', {
      hour12: false,
      hour: '2-digit',
      minute: '2-digit', 
      second: '2-digit',
      fractionalSecondDigits: 3
    });

    logs.push(`${timestamp} | ${message}`);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞
    if (logs.length > 150) {
      logs.splice(0, logs.length - 150);
    }

    cache.put("logs_v2", JSON.stringify(logs), 3600);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
  }
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ ===
function getUserLogs() {
  return JSON.parse(CacheService.getUserCache().get("logs_v2") || "[]");
}

// === –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–µ—à–µ–π ===
function clearAllCaches() {
  try {
    // –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
    PRODUCTS_CACHE = null;
    CACHE_TIMESTAMP = 0;
    LAST_SHEET_DATA_HASH = null;
    
    // –û—á–∏—â–∞–µ–º CacheService
    const cache = CacheService.getUserCache();
    cache.remove("products_map_v5_optimized");
    cache.remove("logs_v2");
    
    // –û—á–∏—â–∞–µ–º JSON —Ñ–∞–π–ª
    const file = DriveApp.getFileById(CACHE_FILE_ID);
    file.setContent('{"products": {}, "timestamp": 0, "hash": "cleared"}');
    
    SpreadsheetApp.getUi().alert("‚úÖ –í—Å–µ –∫–µ—à–∏ –æ—á–∏—â–µ–Ω—ã");
    log("üßπ –í—Å–µ –∫–µ—à–∏ –æ—á–∏—â–µ–Ω—ã");
  } catch (error) {
    SpreadsheetApp.getUi().alert(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error.message}`);
  }
}

// === –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ ===
function forceRefreshCache() {
  try {
    log("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞...");
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∫–µ—à–∏
    PRODUCTS_CACHE = null;
    CACHE_TIMESTAMP = 0;
    LAST_SHEET_DATA_HASH = null;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    const products = loadFromSheetOptimized();
    const currentDataHash = getSheetDataHash();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º
    saveToAllCaches(products, currentDataHash);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å
    PRODUCTS_CACHE = products;
    CACHE_TIMESTAMP = Date.now();
    LAST_SHEET_DATA_HASH = currentDataHash;
    
    SpreadsheetApp.getUi().alert(`‚úÖ –ö–µ—à –æ–±–Ω–æ–≤–ª—ë–Ω: ${Object.keys(products).length} —Ç–æ–≤–∞—Ä–æ–≤`);
    log(`‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${Object.keys(products).length} —Ç–æ–≤–∞—Ä–æ–≤`);
  } catch (error) {
    const errorMsg = `‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`;
    SpreadsheetApp.getUi().alert(errorMsg);
    log(errorMsg);
  }
}

// === –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===
function performanceTest() {
  const startTime = Date.now();
  
  log("üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏");
  
  // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞
  const products = getAllProductsOptimized();
  const loadTime = Date.now() - startTime;
  
  // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
  const testBarcodes = Object.keys(products).slice(0, 10);
  const searchStart = Date.now();
  
  let found = 0;
  for (const barcode of testBarcodes) {
    if (findProductByBarcodeOptimized(barcode)) {
      found++;
    }
  }
  
  const searchTime = Date.now() - searchStart;
  const totalTime = Date.now() - startTime;
  
  const report = [
    `üìä –û–¢–ß–Å–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:`,
    `‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–µ—à–µ: ${Object.keys(products).length}`,
    `‚Ä¢ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞: ${loadTime}–º—Å`,
    `‚Ä¢ –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ ${testBarcodes.length} —Ç–æ–≤–∞—Ä–æ–≤: ${searchTime}–º—Å`,
    `‚Ä¢ –ù–∞–π–¥–µ–Ω–æ: ${found}/${testBarcodes.length}`,
    `‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}–º—Å`,
    `‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞: ${(searchTime/testBarcodes.length).toFixed(2)}–º—Å/—Ç–æ–≤–∞—Ä`
  ].join('\n');
  
  log(report);
  SpreadsheetApp.getUi().alert(report);
}

// === –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ ===
function testFind() {
  const ui = SpreadsheetApp.getUi();
  const res = ui.prompt("–í–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∞:");
  if (res.getSelectedButton() !== ui.Button.OK) return;
  
  const barcode = res.getResponseText();
  if (!barcode) return;

  const startTime = Date.now();
  const product = findProductByBarcodeOptimized(barcode);
  const searchTime = Date.now() - startTime;
  
  if (product) {
    ui.alert(`‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞ ${searchTime}–º—Å\n"${product.name}"\n–¶–µ–Ω–∞: ${product.price}`);
  } else {
    ui.alert(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞ ${searchTime}–º—Å`);
  }
}

// === –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞ ===
function showCacheStats() {
  try {
    const memoryStatus = PRODUCTS_CACHE ? `${Object.keys(PRODUCTS_CACHE).length} —Ç–æ–≤–∞—Ä–æ–≤` : "–ü—É—Å—Ç";
    const memoryAge = CACHE_TIMESTAMP ? `${Math.round((Date.now() - CACHE_TIMESTAMP)/1000)}—Å –Ω–∞–∑–∞–¥` : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    
    const cacheData = CacheService.getUserCache().get("products_map_v5_optimized");
    const cacheServiceStatus = cacheData ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–ü—É—Å—Ç";
    
    let jsonStatus = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    try {
      const file = DriveApp.getFileById(CACHE_FILE_ID);
      const content = file.getContentAsString();
      const data = JSON.parse(content);
      jsonStatus = data.products ? `${Object.keys(data.products).length} —Ç–æ–≤–∞—Ä–æ–≤` : "–ü—É—Å—Ç";
    } catch (e) {
      jsonStatus = "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è";
    }
    
    const stats = [
      "üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ï–®–ê:",
      "",
      `üß† –ü–∞–º—è—Ç—å —Å–∫—Ä–∏–ø—Ç–∞: ${memoryStatus}`,
      `‚è±Ô∏è –í–æ–∑—Ä–∞—Å—Ç –∫–µ—à–∞: ${memoryAge}`,
      `üîÑ CacheService: ${cacheServiceStatus}`, 
      `üìÑ JSON —Ñ–∞–π–ª: ${jsonStatus}`,
      `üÜî –•–µ—à –¥–∞–Ω–Ω—ã—Ö: ${LAST_SHEET_DATA_HASH || "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"}`
    ].join('\n');
    
    SpreadsheetApp.getUi().alert(stats);
  } catch (error) {
    SpreadsheetApp.getUi().alert(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
  }
}

// === –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ ===
function showLogs() {
  const html = HtmlService.createHtmlOutputFromFile('Logs')
    .setTitle('üìã –õ–æ–≥–∏ (–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)')
    .setWidth(700)
    .setHeight(600);
  SpreadsheetApp.getUi().showModalDialog(html, '–õ–æ–≥–∏');
}

// === –§—É–Ω–∫—Ü–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–µ–π ===
function refreshProductsCache() {
  forceRefreshCache();
}

function clearLogs() {
  CacheService.getUserCache().remove("logs_v2");
  log("üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã");
}