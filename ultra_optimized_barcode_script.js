// === –£–õ–¨–¢–†–ê-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ü–û–î–†–û–ë–ù–´–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú ===
// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
// 1. –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
// 2. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
// 3. –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
// 4. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
// 5. –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
// 6. –ú–∏–∫—Ä–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ–π

// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
const SHEET_PRODUCTS = "1. –¢–æ–≤–∞—Ä—ã";
const SHEET_PURCHASES = "3 –ó–∞–∫—É–ø–∫–∏";
const SHEET_SALES = "4 –ü—Ä–æ–¥–∞–∂–∏";

// ID —Ñ–∞–π–ª–∞ –Ω–∞ Google –î–∏—Å–∫–µ
const CACHE_FILE_ID = "1Mk2tr9z1ZA1uxAzNZdWy9z4qUHXLCfoT";

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const DEBUG = true;
const PERFORMANCE_LOGGING = true; // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const CACHE_TTL_SECONDS = 7200;
const MEMORY_CACHE_TTL = 1800;
const BATCH_SIZE = 1000;
const PRELOAD_ON_STARTUP = true; // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
let PRODUCTS_CACHE = null;
let PRODUCTS_INDEX = null; // –ò–Ω–¥–µ–∫—Å –¥–ª—è O(1) –ø–æ–∏—Å–∫–∞
let CACHE_TIMESTAMP = 0;
let LAST_SHEET_DATA_HASH = null;
let CALL_STATISTICS = {}; // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–∑–æ–≤–æ–≤
let PERFORMANCE_METRICS = {}; // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

// === –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===
function startTimer(operationName) {
  if (!PERFORMANCE_LOGGING) return null;
  
  const timerId = `${operationName}_${Date.now()}_${Math.random()}`;
  PERFORMANCE_METRICS[timerId] = {
    name: operationName,
    startTime: Date.now(),
    startMemory: getMemoryUsage()
  };
  
  return timerId;
}

function endTimer(timerId, additionalInfo = '') {
  if (!PERFORMANCE_LOGGING || !timerId || !PERFORMANCE_METRICS[timerId]) return;
  
  const metric = PERFORMANCE_METRICS[timerId];
  const duration = Date.now() - metric.startTime;
  const memoryUsed = getMemoryUsage() - metric.startMemory;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  if (!CALL_STATISTICS[metric.name]) {
    CALL_STATISTICS[metric.name] = {
      count: 0,
      totalTime: 0,
      minTime: Infinity,
      maxTime: 0,
      avgTime: 0,
      lastCall: 0
    };
  }
  
  const stats = CALL_STATISTICS[metric.name];
  stats.count++;
  stats.totalTime += duration;
  stats.minTime = Math.min(stats.minTime, duration);
  stats.maxTime = Math.max(stats.maxTime, duration);
  stats.avgTime = stats.totalTime / stats.count;
  stats.lastCall = Date.now();
  
  const logMsg = `‚è±Ô∏è ${metric.name}: ${duration}ms${memoryUsed ? ` | –ü–∞–º—è—Ç—å: ${memoryUsed}KB` : ''}${additionalInfo ? ` | ${additionalInfo}` : ''}`;
  log(logMsg);
  
  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
  if (duration > 1000) {
    log(`üêå –ú–ï–î–õ–ï–ù–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø: ${metric.name} –∑–∞–Ω—è–ª–∞ ${duration}ms!`);
  } else if (duration > 100) {
    log(`‚ö†Ô∏è –î–æ–ª–≥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: ${metric.name} –∑–∞–Ω—è–ª–∞ ${duration}ms`);
  }
  
  delete PERFORMANCE_METRICS[timerId];
}

function getMemoryUsage() {
  // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
  try {
    return Math.round((JSON.stringify(PRODUCTS_CACHE || {}).length + 
                      JSON.stringify(PRODUCTS_INDEX || {}).length) / 1024);
  } catch (e) {
    return 0;
  }
}

// === –ì–ª–∞–≤–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä onEdit (–£–õ–¨–¢–†–ê-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô) ===
function onEdit(e) {
  const timerId = startTimer('onEdit_full');
  
  if (!e || !e.range) {
    endTimer(timerId, '–ù–µ—Ç —Å–æ–±—ã—Ç–∏—è');
    return;
  }

  const range = e.range;
  const sheet = range.getSheet();
  const sheetName = sheet.getName();
  const row = range.getRow();
  const col = range.getColumn();

  log(`üéØ onEdit: –ª–∏—Å—Ç="${sheetName}", —è—á–µ–π–∫–∞=${range.getA1Notation()}, —Å—Ç—Ä–æ–∫–∞=${row}, –∫–æ–ª–æ–Ω–∫–∞=${col}`);

  // –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  const quickCheckTimer = startTimer('onEdit_quickCheck');
  
  if (col !== 2 || row < 2 || range.getNumRows() > 1 || range.getNumColumns() > 1) {
    endTimer(quickCheckTimer, '–ü—Ä–æ–ø—É—Å–∫ - –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω');
    endTimer(timerId, '–ó–∞–≤–µ—Ä—à–µ–Ω–æ - –ø—Ä–æ–ø—É—Å–∫');
    return;
  }

  if (sheetName !== SHEET_PURCHASES && sheetName !== SHEET_SALES) {
    endTimer(quickCheckTimer, '–ü—Ä–æ–ø—É—Å–∫ - –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ª–∏—Å—Ç');
    endTimer(timerId, '–ó–∞–≤–µ—Ä—à–µ–Ω–æ - –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –ª–∏—Å—Ç');
    return;
  }
  
  endTimer(quickCheckTimer, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞');

  // –ß–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
  const valueTimer = startTimer('getValue');
  const value = range.getValue();
  endTimer(valueTimer, `–ó–Ω–∞—á–µ–Ω–∏–µ: "${value}"`);

  log(`‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –ª–∏—Å—Ç="${sheetName}", —è—á–µ–π–∫–∞=${range.getA1Notation()}, –∑–Ω–∞—á–µ–Ω–∏–µ="${value}"`);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
  if (!value) {
    const clearTimer = startTimer('clearRow');
    const colsToClean = sheetName === SHEET_PURCHASES ? [1, 3, 4] : [1, 3, 4, 5];
    clearRowBatch(sheet, row, colsToClean);
    endTimer(clearTimer, `–û—á–∏—â–µ–Ω–æ ${colsToClean.length} –∫–æ–ª–æ–Ω–æ–∫`);
    endTimer(timerId, '–ó–∞–≤–µ—Ä—à–µ–Ω–æ - –æ—á–∏—Å—Ç–∫–∞');
    return;
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
  const mode = sheetName === SHEET_PURCHASES ? "purchase" : "sale";
  handleBarcodeUltraOptimized(value, sheet, row, mode);
  
  endTimer(timerId, `–†–µ–∂–∏–º: ${mode}`);
}

// === –£–õ–¨–¢–†–ê-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ ===
function handleBarcodeUltraOptimized(barcode, sheet, row, mode) {
  const timerId = startTimer('handleBarcode_full');
  
  const bc = String(barcode).trim();
  if (!bc) {
    log("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —à—Ç—Ä–∏—Ö-–∫–æ–¥");
    endTimer(timerId, '–ü—É—Å—Ç–æ–π —à—Ç—Ä–∏—Ö-–∫–æ–¥');
    return;
  }

  log(`üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞: "${bc}"`);

  // –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Å –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const searchTimer = startTimer('productSearch');
  const product = findProductUltraFast(bc);
  endTimer(searchTimer, product ? `–ù–∞–π–¥–µ–Ω: ${product.name}` : '–ù–µ –Ω–∞–π–¥–µ–Ω');

  if (!product) {
    const errorTimer = startTimer('setErrorMessage');
    sheet.getRange(row, 3).setValue("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω");
    endTimer(errorTimer);
    log(`‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: "${bc}"`);
    endTimer(timerId, '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  log(`‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: "${product.name}" (—Ü–µ–Ω–∞: ${product.price})`);

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏
  const prepareTimer = startTimer('prepareData');
  const now = new Date();
  const updates = [];
  
  if (mode === "purchase") {
    updates.push([row, 1, now], [row, 3, product.name], [row, 4, 1]);
    log(`üì• –ó–∞–∫—É–ø–∫–∞: "${product.name}", –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ=1`);
  } else if (mode === "sale") {
    updates.push([row, 1, now], [row, 3, product.name], [row, 4, 1], [row, 5, product.price]);
    log(`üì§ –ü—Ä–æ–¥–∞–∂–∞: "${product.name}", —Ü–µ–Ω–∞=${product.price}`);
  }
  endTimer(prepareTimer, `–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${updates.length} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π`);

  // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
  const updateTimer = startTimer('batchUpdate');
  batchUpdateCellsOptimized(sheet, updates);
  endTimer(updateTimer, `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${updates.length} —è—á–µ–µ–∫`);

  // –ê–≤—Ç–æ-–ø–µ—Ä–µ—Ö–æ–¥ –¥–ª—è –ø—Ä–æ–¥–∞–∂
  if (mode === "sale") {
    const navigationTimer = startTimer('autoNavigation');
    const nextRow = row + 1;
    sheet.setActiveSelection(`B${nextRow}`);
    endTimer(navigationTimer, `–ü–µ—Ä–µ—Ö–æ–¥ –∫ B${nextRow}`);
    log(`üéØ –ê–≤—Ç–æ-–ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–æ–∫–µ ${nextRow}`);
  }
  
  endTimer(timerId, `–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω ${mode}`);
}

// === –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–´–ô –ø–æ–∏—Å–∫ —Å –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ–º ===
function findProductUltraFast(barcode) {
  const timerId = startTimer('findProduct');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ –ø–∞–º—è—Ç–∏ (O(1) –¥–æ—Å—Ç—É–ø)
  if (PRODUCTS_INDEX && PRODUCTS_INDEX[barcode]) {
    const product = PRODUCTS_INDEX[barcode];
    endTimer(timerId, `–ù–∞–π–¥–µ–Ω –≤ –∏–Ω–¥–µ–∫—Å–µ: ${product.name}`);
    log(`‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –∏–Ω–¥–µ–∫—Å–µ: "${product.name}"`);
    return product;
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  const loadTimer = startTimer('loadProductsIfNeeded');
  const products = getAllProductsUltraOptimized();
  endTimer(loadTimer, `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(products).length} —Ç–æ–≤–∞—Ä–æ–≤`);
  
  const result = products[barcode] || null;
  endTimer(timerId, result ? `–ù–∞–π–¥–µ–Ω: ${result.name}` : '–ù–µ –Ω–∞–π–¥–µ–Ω');
  
  return result;
}

// === –£–õ–¨–¢–†–ê-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π ===
function getAllProductsUltraOptimized() {
  const timerId = startTimer('getAllProducts');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ –ø–∞–º—è—Ç–∏ (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π - O(1))
    const memoryCheckTimer = startTimer('memoryCheck');
    if (PRODUCTS_INDEX && (Date.now() - CACHE_TIMESTAMP) < (MEMORY_CACHE_TTL * 1000)) {
      endTimer(memoryCheckTimer, `–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å: ${Object.keys(PRODUCTS_INDEX).length} —Ç–æ–≤–∞—Ä–æ–≤`);
      endTimer(timerId, '–ò–∑ –∏–Ω–¥–µ–∫—Å–∞ –ø–∞–º—è—Ç–∏');
      log(`‚ö° –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω–¥–µ–∫—Å—É: ${Object.keys(PRODUCTS_INDEX).length} —Ç–æ–≤–∞—Ä–æ–≤`);
      return PRODUCTS_INDEX;
    }
    endTimer(memoryCheckTimer, '–ò–Ω–¥–µ–∫—Å —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º CacheService
    const cacheServiceTimer = startTimer('cacheServiceCheck');
    const cacheKey = "products_ultra_v6";
    const cached = CacheService.getUserCache().get(cacheKey);
    
    if (cached) {
      const data = JSON.parse(cached);
      if (data.timestamp && (Date.now() - data.timestamp) < (CACHE_TTL_SECONDS * 1000)) {
        // –°—Ç—Ä–æ–∏–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        const indexBuildTimer = startTimer('buildIndex');
        PRODUCTS_INDEX = data.products;
        PRODUCTS_CACHE = data.products;
        CACHE_TIMESTAMP = Date.now();
        endTimer(indexBuildTimer, `–ü–æ—Å—Ç—Ä–æ–µ–Ω –∏–Ω–¥–µ–∫—Å: ${Object.keys(PRODUCTS_INDEX).length} —Ç–æ–≤–∞—Ä–æ–≤`);
        
        endTimer(cacheServiceTimer, '–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ CacheService');
        endTimer(timerId, '–ò–∑ CacheService');
        log(`‚úÖ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ CacheService: ${Object.keys(PRODUCTS_INDEX).length} —Ç–æ–≤–∞—Ä–æ–≤`);
        return PRODUCTS_INDEX;
      }
    }
    endTimer(cacheServiceTimer, 'CacheService –ø—É—Å—Ç –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª');

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    const hashCheckTimer = startTimer('hashCheck');
    const currentDataHash = getSheetDataHashOptimized();
    if (LAST_SHEET_DATA_HASH === currentDataHash && PRODUCTS_INDEX) {
      endTimer(hashCheckTimer, '–î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å');
      endTimer(timerId, '–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã');
      log(`‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å`);
      return PRODUCTS_INDEX;
    }
    endTimer(hashCheckTimer, `–ù–æ–≤—ã–π —Ö–µ—à: ${currentDataHash}`);

    // 4. –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ JSON
    const jsonTimer = startTimer('jsonLoad');
    const jsonData = readJsonCacheUltraOptimized();
    if (jsonData && jsonData.hash === currentDataHash && jsonData.products) {
      // –°—Ç—Ä–æ–∏–º –∏–Ω–¥–µ–∫—Å
      const indexTimer = startTimer('buildIndexFromJson');
      PRODUCTS_INDEX = jsonData.products;
      PRODUCTS_CACHE = jsonData.products;
      CACHE_TIMESTAMP = Date.now();
      LAST_SHEET_DATA_HASH = currentDataHash;
      endTimer(indexTimer, `–ò–Ω–¥–µ–∫—Å –ø–æ—Å—Ç—Ä–æ–µ–Ω: ${Object.keys(PRODUCTS_INDEX).length} —Ç–æ–≤–∞—Ä–æ–≤`);
      
      // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CacheService
      setTimeout(() => saveToCacheService(jsonData.products, currentDataHash), 0);
      
      endTimer(jsonTimer, '–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ JSON');
      endTimer(timerId, '–ò–∑ JSON —Ñ–∞–π–ª–∞');
      log(`‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ JSON —Å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –∏–Ω–¥–µ–∫—Å–∞: ${Object.keys(PRODUCTS_INDEX).length} —Ç–æ–≤–∞—Ä–æ–≤`);
      return PRODUCTS_INDEX;
    }
    endTimer(jsonTimer, 'JSON –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª');

    // 5. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å)
    log(`üîÑ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...`);
    const sheetTimer = startTimer('sheetLoad');
    const products = loadFromSheetUltraOptimized();
    endTimer(sheetTimer, `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(products).length} —Ç–æ–≤–∞—Ä–æ–≤`);
    
    // –°—Ç—Ä–æ–∏–º –∏–Ω–¥–µ–∫—Å
    const finalIndexTimer = startTimer('buildFinalIndex');
    PRODUCTS_INDEX = products;
    PRODUCTS_CACHE = products;
    CACHE_TIMESTAMP = Date.now();
    LAST_SHEET_DATA_HASH = currentDataHash;
    endTimer(finalIndexTimer, `–§–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å: ${Object.keys(products).length} —Ç–æ–≤–∞—Ä–æ–≤`);

    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Å–µ –∫–µ—à–∏
    setTimeout(() => saveToAllCachesAsync(products, currentDataHash), 0);

    endTimer(timerId, '–ò–∑ Google Sheets');
    log(`‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${Object.keys(products).length} —Ç–æ–≤–∞—Ä–æ–≤`);
    return products;

  } catch (error) {
    endTimer(timerId, `–û—à–∏–±–∫–∞: ${error.message}`);
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
    return {};
  }
}

// === –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ —Ö–µ—à–∞ –¥–∞–Ω–Ω—ã—Ö ===
function getSheetDataHashOptimized() {
  const timerId = startTimer('getDataHash');
  
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(SHEET_PRODUCTS);
    if (!sheet) {
      endTimer(timerId, '–õ–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return "no_sheet";
    }
    
    const lastRow = sheet.getLastRow();
    if (lastRow < 2) {
      endTimer(timerId, '–ü—É—Å—Ç–æ–π –ª–∏—Å—Ç');
      return "empty_sheet";
    }
    
    // –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ö–µ—à –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
    const dataRange = sheet.getDataRange();
    const numRows = dataRange.getNumRows();
    const numCols = dataRange.getNumColumns();
    const lastModified = sheet.getRange(lastRow, 1, 1, numCols).getValues()[0].join('|');
    
    const hash = `${numRows}_${numCols}_${lastModified.length}_${Date.now().toString().slice(-6)}`;
    endTimer(timerId, `–•–µ—à: ${hash}`);
    return hash;
  } catch (error) {
    endTimer(timerId, `–û—à–∏–±–∫–∞: ${error.message}`);
    return "error_" + Date.now();
  }
}

// === –£–õ–¨–¢–†–ê-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï —á—Ç–µ–Ω–∏–µ JSON ===
function readJsonCacheUltraOptimized() {
  const timerId = startTimer('readJsonCache');
  
  try {
    const file = DriveApp.getFileById(CACHE_FILE_ID);
    const content = file.getContentAsString();
    
    if (!content || content.trim() === '') {
      endTimer(timerId, 'JSON –ø—É—Å—Ç');
      return null;
    }
    
    const parseTimer = startTimer('parseJson');
    const data = JSON.parse(content);
    endTimer(parseTimer, `–†–∞–∑–º–µ—Ä: ${content.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    if (!data.products || !data.timestamp) {
      endTimer(timerId, '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞');
      return null;
    }
    
    const age = Date.now() - data.timestamp;
    if (age > (CACHE_TTL_SECONDS * 1000)) {
      endTimer(timerId, `–£—Å—Ç–∞—Ä–µ–ª –Ω–∞ ${Math.round(age/1000)}—Å`);
      return null;
    }
    
    endTimer(timerId, `–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, –≤–æ–∑—Ä–∞—Å—Ç: ${Math.round(age/1000)}—Å`);
    return data;
  } catch (error) {
    endTimer(timerId, `–û—à–∏–±–∫–∞: ${error.message}`);
    return null;
  }
}

// === –£–õ–¨–¢–†–ê-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ===
function loadFromSheetUltraOptimized() {
  const timerId = startTimer('loadFromSheet');
  
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName(SHEET_PRODUCTS);
  
  if (!sheet) {
    endTimer(timerId, '–õ–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return {};
  }

  const lastRow = sheet.getLastRow();
  if (lastRow < 2) {
    endTimer(timerId, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
    return {};
  }

  // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: —á–∏—Ç–∞–µ–º –≤–µ—Å—å –¥–∏–∞–ø–∞–∑–æ–Ω –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
  const readTimer = startTimer('readSheetData');
  const range = sheet.getRange(2, 1, lastRow - 1, 5);
  const values = range.getValues();
  endTimer(readTimer, `–ü—Ä–æ—á–∏—Ç–∞–Ω–æ ${values.length} —Å—Ç—Ä–æ–∫`);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø–∞–º—è—Ç–∏ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–ª–ª–æ–∫–∞—Ü–∏–µ–π
  const processTimer = startTimer('processData');
  const products = Object.create(null); // –ë—ã—Å—Ç—Ä—ã–π –æ–±—ä–µ–∫—Ç –±–µ–∑ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞
  let validCount = 0;
  let emptyBarcodes = 0;

  for (let i = 0; i < values.length; i++) {
    const row = values[i];
    const barcode = String(row[3] || '').trim();
    
    if (!barcode) {
      emptyBarcodes++;
      continue;
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    products[barcode] = {
      name: row[1] || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
      price: row[4] || 0,
      row: i + 2,
      index: validCount // –î–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    };
    
    validCount++;
  }
  
  endTimer(processTimer, `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${validCount} —Ç–æ–≤–∞—Ä–æ–≤, –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${emptyBarcodes} –ø—É—Å—Ç—ã—Ö`);
  endTimer(timerId, `–ò—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${validCount}`);
  
  log(`üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: ${validCount} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ ${values.length} —Å—Ç—Ä–æ–∫ (–ø—Ä–æ–ø—É—â–µ–Ω–æ ${emptyBarcodes} –ø—É—Å—Ç—ã—Ö —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤)`);
  return products;
}

// === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CacheService ===
function saveToCacheService(products, dataHash) {
  const timerId = startTimer('saveToCacheService');
  
  try {
    const cacheData = {
      products: products,
      timestamp: Date.now(),
      hash: dataHash
    };
    
    CacheService.getUserCache().put("products_ultra_v6", JSON.stringify(cacheData), CACHE_TTL_SECONDS);
    endTimer(timerId, `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${Object.keys(products).length} —Ç–æ–≤–∞—Ä–æ–≤`);
    log(`üíæ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CacheService: ${Object.keys(products).length} —Ç–æ–≤–∞—Ä–æ–≤`);
  } catch (error) {
    endTimer(timerId, `–û—à–∏–±–∫–∞: ${error.message}`);
    log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ CacheService: ${error.message}`);
  }
}

// === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Å–µ –∫–µ—à–∏ ===
function saveToAllCachesAsync(products, dataHash) {
  const timerId = startTimer('saveAllCaches');
  
  try {
    const timestamp = Date.now();
    const cacheData = {
      products: products,
      timestamp: timestamp,
      hash: dataHash
    };

    // CacheService (–±—ã—Å—Ç—Ä–æ)
    const cacheServiceTimer = startTimer('saveCacheService');
    CacheService.getUserCache().put("products_ultra_v6", JSON.stringify(cacheData), CACHE_TTL_SECONDS);
    endTimer(cacheServiceTimer);
    
    // JSON —Ñ–∞–π–ª (–º–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ)
    const jsonTimer = startTimer('saveJsonFile');
    const file = DriveApp.getFileById(CACHE_FILE_ID);
    file.setContent(JSON.stringify(cacheData, null, 2));
    endTimer(jsonTimer, `–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${JSON.stringify(cacheData).length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    endTimer(timerId, `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö: ${Object.keys(products).length} —Ç–æ–≤–∞—Ä–æ–≤`);
    log(`üíæ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${Object.keys(products).length} —Ç–æ–≤–∞—Ä–æ–≤`);
  } catch (error) {
    endTimer(timerId, `–û—à–∏–±–∫–∞: ${error.message}`);
    log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`);
  }
}

// === –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –±–∞—Ç—á–µ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ===
function batchUpdateCellsOptimized(sheet, updates) {
  const timerId = startTimer('batchUpdate');
  
  if (!updates || updates.length === 0) {
    endTimer(timerId, '–ù–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
    return;
  }
  
  try {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–æ–≤ API
    const rowUpdates = {};
    
    for (const [row, col, value] of updates) {
      if (!rowUpdates[row]) rowUpdates[row] = {};
      rowUpdates[row][col] = value;
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
    let totalUpdated = 0;
    for (const [row, cols] of Object.entries(rowUpdates)) {
      const rowNum = parseInt(row);
      const colNums = Object.keys(cols).map(Number).sort((a, b) => a - b);
      
      // –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ–¥—Ä—è–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
      if (colNums.length > 1 && colNums[colNums.length - 1] - colNums[0] === colNums.length - 1) {
        const startCol = colNums[0];
        const values = colNums.map(col => cols[col]);
        sheet.getRange(rowNum, startCol, 1, values.length).setValues([values]);
        totalUpdated += values.length;
      } else {
        // –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–π
        for (const col of colNums) {
          sheet.getRange(rowNum, col).setValue(cols[col]);
          totalUpdated++;
        }
      }
    }
    
    endTimer(timerId, `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${totalUpdated} —è—á–µ–µ–∫ –≤ ${Object.keys(rowUpdates).length} —Å—Ç—Ä–æ–∫–∞—Ö`);
    log(`üìù –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${totalUpdated} —è—á–µ–µ–∫`);
  } catch (error) {
    endTimer(timerId, `–û—à–∏–±–∫–∞: ${error.message}`);
    log(`‚ùå –û—à–∏–±–∫–∞ –±–∞—Ç—á–µ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`);
  }
}

// === –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ ===
function clearRowBatch(sheet, row, cols) {
  const timerId = startTimer('clearRow');
  
  if (!cols || cols.length === 0) {
    endTimer(timerId, '–ù–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏');
    return;
  }
  
  try {
    // –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ–¥—Ä—è–¥, –æ—á–∏—â–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
    const sortedCols = [...cols].sort((a, b) => a - b);
    if (sortedCols.length > 1 && sortedCols[sortedCols.length - 1] - sortedCols[0] === sortedCols.length - 1) {
      const startCol = sortedCols[0];
      sheet.getRange(row, startCol, 1, sortedCols.length).clearContent();
    } else {
      // –ò–Ω–∞—á–µ –æ—á–∏—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π
      sortedCols.forEach(col => sheet.getRange(row, col).clearContent());
    }
    
    endTimer(timerId, `–û—á–∏—â–µ–Ω–æ ${cols.length} –∫–æ–ª–æ–Ω–æ–∫`);
    log(`üßπ –û—á–∏—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ${row}, –∫–æ–ª–æ–Ω–∫–∏: ${cols.join(', ')}`);
  } catch (error) {
    endTimer(timerId, `–û—à–∏–±–∫–∞: ${error.message}`);
    log(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: ${error.message}`);
  }
}

// === –£–õ–£–ß–®–ï–ù–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π ===
function log(message) {
  if (!DEBUG) return;
  
  try {
    const timestamp = new Date().toLocaleTimeString('ru-RU', {
      hour12: false,
      hour: '2-digit',
      minute: '2-digit', 
      second: '2-digit',
      fractionalSecondDigits: 3
    });
    
    const logEntry = `${timestamp} | ${message}`;
    
    // –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –ª–æ–≥–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (!this.logBuffer) this.logBuffer = [];
    this.logBuffer.push(logEntry);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—É—Ñ–µ—Ä –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø–∏—Å–µ–π –∏–ª–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    if (this.logBuffer.length >= 10) {
      flushLogBuffer();
    } else if (!this.logFlushTimer) {
      this.logFlushTimer = setTimeout(flushLogBuffer, 5000);
    }
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
  }
}

function flushLogBuffer() {
  if (!this.logBuffer || this.logBuffer.length === 0) return;
  
  try {
    const cache = CacheService.getUserCache();
    const existingLogs = JSON.parse(cache.get("logs_ultra_v3") || "[]");
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ª–æ–≥–∏
    existingLogs.push(...this.logBuffer);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
    if (existingLogs.length > 200) {
      existingLogs.splice(0, existingLogs.length - 200);
    }
    
    cache.put("logs_ultra_v3", JSON.stringify(existingLogs), 3600);
    
    // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
    this.logBuffer = [];
    if (this.logFlushTimer) {
      clearTimeout(this.logFlushTimer);
      this.logFlushTimer = null;
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞ –ª–æ–≥–æ–≤:", error);
  }
}

// === –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ===
function preloadData() {
  if (!PRELOAD_ON_STARTUP) return;
  
  const timerId = startTimer('preloadData');
  log("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...");
  
  try {
    getAllProductsUltraOptimized();
    endTimer(timerId, `–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(PRODUCTS_INDEX || {}).length} —Ç–æ–≤–∞—Ä–æ–≤`);
    log(`‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${Object.keys(PRODUCTS_INDEX || {}).length} —Ç–æ–≤–∞—Ä–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é`);
  } catch (error) {
    endTimer(timerId, `–û—à–∏–±–∫–∞: ${error.message}`);
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
  }
}

// === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===
function getPerformanceStats() {
  const stats = {
    callStatistics: CALL_STATISTICS,
    cacheInfo: {
      productsInMemory: PRODUCTS_INDEX ? Object.keys(PRODUCTS_INDEX).length : 0,
      cacheAge: CACHE_TIMESTAMP ? Math.round((Date.now() - CACHE_TIMESTAMP) / 1000) : 0,
      memoryUsage: getMemoryUsage(),
      lastDataHash: LAST_SHEET_DATA_HASH
    },
    activeTimers: Object.keys(PERFORMANCE_METRICS).length
  };
  
  return stats;
}

function showPerformanceReport() {
  const stats = getPerformanceStats();
  
  let report = ["üìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:", ""];
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞
  report.push("üß† –°–û–°–¢–û–Ø–ù–ò–ï –ö–ï–®–ê:");
  report.push(`‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤ –≤ –ø–∞–º—è—Ç–∏: ${stats.cacheInfo.productsInMemory}`);
  report.push(`‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç –∫–µ—à–∞: ${stats.cacheInfo.cacheAge}—Å`);
  report.push(`‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${stats.cacheInfo.memoryUsage}KB`);
  report.push(`‚Ä¢ –•–µ—à –¥–∞–Ω–Ω—ã—Ö: ${stats.cacheInfo.lastDataHash || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}`);
  report.push("");
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–∑–æ–≤–æ–≤
  report.push("‚è±Ô∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ü–ï–†–ê–¶–ò–ô:");
  const sortedStats = Object.entries(stats.callStatistics)
    .sort(([,a], [,b]) => b.totalTime - a.totalTime);
  
  for (const [operation, data] of sortedStats.slice(0, 10)) {
    report.push(`‚Ä¢ ${operation}:`);
    report.push(`  - –í—ã–∑–æ–≤–æ–≤: ${data.count}`);
    report.push(`  - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${data.avgTime.toFixed(1)}–º—Å`);
    report.push(`  - –î–∏–∞–ø–∞–∑–æ–Ω: ${data.minTime}-${data.maxTime}–º—Å`);
    report.push(`  - –û–±—â–µ–µ –≤—Ä–µ–º—è: ${data.totalTime}–º—Å`);
  }
  
  if (sortedStats.length > 10) {
    report.push(`... –∏ –µ—â—ë ${sortedStats.length - 10} –æ–ø–µ—Ä–∞—Ü–∏–π`);
  }
  
  const reportText = report.join('\n');
  SpreadsheetApp.getUi().alert(reportText);
  log("üìä –û—Ç—á—ë—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
}

// === –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===
function advancedPerformanceTest() {
  log("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...");
  
  const testResults = [];
  
  // –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–µ—à–∞
  const loadStart = Date.now();
  const products = getAllProductsUltraOptimized();
  const loadTime = Date.now() - loadStart;
  testResults.push(`–ó–∞–≥—Ä—É–∑–∫–∞ –∫–µ—à–∞: ${loadTime}–º—Å`);
  
  // –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
  const existingBarcodes = Object.keys(products).slice(0, 20);
  let searchTime = 0;
  let found = 0;
  
  for (const barcode of existingBarcodes) {
    const start = Date.now();
    if (findProductUltraFast(barcode)) {
      found++;
    }
    searchTime += Date.now() - start;
  }
  
  testResults.push(`–ü–æ–∏—Å–∫ ${existingBarcodes.length} —Ç–æ–≤–∞—Ä–æ–≤: ${searchTime}–º—Å (${found} –Ω–∞–π–¥–µ–Ω–æ)`);
  testResults.push(`–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞: ${(searchTime/existingBarcodes.length).toFixed(2)}–º—Å/—Ç–æ–≤–∞—Ä`);
  
  // –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
  const nonExistentBarcodes = ['FAKE001', 'FAKE002', 'FAKE003', 'FAKE004', 'FAKE005'];
  let notFoundTime = 0;
  
  for (const barcode of nonExistentBarcodes) {
    const start = Date.now();
    findProductUltraFast(barcode);
    notFoundTime += Date.now() - start;
  }
  
  testResults.push(`–ü–æ–∏—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${notFoundTime}–º—Å`);
  
  // –¢–µ—Å—Ç 4: –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç
  const stressTestStart = Date.now();
  for (let i = 0; i < 100; i++) {
    const randomBarcode = existingBarcodes[i % existingBarcodes.length];
    findProductUltraFast(randomBarcode);
  }
  const stressTime = Date.now() - stressTestStart;
  testResults.push(`–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç (100 –ø–æ–∏—Å–∫–æ–≤): ${stressTime}–º—Å`);
  
  // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const totalTime = Date.now() - loadStart;
  testResults.push(`–û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: ${totalTime}–º—Å`);
  testResults.push(`–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–µ—à–µ: ${Object.keys(products).length}`);
  testResults.push(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${getMemoryUsage()}KB`);
  
  const report = ["üéØ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:", "", ...testResults].join('\n');
  SpreadsheetApp.getUi().alert(report);
  log(`üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ ${totalTime}–º—Å`);
}

// === –§—É–Ω–∫—Ü–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ===
function getUserLogs() {
  flushLogBuffer(); // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±—É—Ñ–µ—Ä
  return JSON.parse(CacheService.getUserCache().get("logs_ultra_v3") || "[]");
}

function clearLogs() {
  this.logBuffer = [];
  if (this.logFlushTimer) {
    clearTimeout(this.logFlushTimer);
    this.logFlushTimer = null;
  }
  CacheService.getUserCache().remove("logs_ultra_v3");
  log("üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã");
}

function clearAllCaches() {
  const timerId = startTimer('clearAllCaches');
  
  try {
    // –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
    PRODUCTS_CACHE = null;
    PRODUCTS_INDEX = null;
    CACHE_TIMESTAMP = 0;
    LAST_SHEET_DATA_HASH = null;
    CALL_STATISTICS = {};
    
    // –û—á–∏—â–∞–µ–º CacheService
    const cache = CacheService.getUserCache();
    cache.remove("products_ultra_v6");
    
    // –û—á–∏—â–∞–µ–º JSON —Ñ–∞–π–ª
    const file = DriveApp.getFileById(CACHE_FILE_ID);
    file.setContent('{"products": {}, "timestamp": 0, "hash": "cleared"}');
    
    endTimer(timerId);
    SpreadsheetApp.getUi().alert("‚úÖ –í—Å–µ –∫–µ—à–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω—ã");
    log("üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–µ—à–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
  } catch (error) {
    endTimer(timerId, `–û—à–∏–±–∫–∞: ${error.message}`);
    SpreadsheetApp.getUi().alert(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error.message}`);
  }
}

function forceRefreshCache() {
  const timerId = startTimer('forceRefresh');
  
  try {
    log("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–µ—à–µ–π...");
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∫–µ—à–∏
    PRODUCTS_CACHE = null;
    PRODUCTS_INDEX = null;
    CACHE_TIMESTAMP = 0;
    LAST_SHEET_DATA_HASH = null;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    const products = getAllProductsUltraOptimized();
    
    endTimer(timerId, `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${Object.keys(products).length} —Ç–æ–≤–∞—Ä–æ–≤`);
    SpreadsheetApp.getUi().alert(`‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${Object.keys(products).length} —Ç–æ–≤–∞—Ä–æ–≤`);
    log(`‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${Object.keys(products).length} —Ç–æ–≤–∞—Ä–æ–≤`);
  } catch (error) {
    endTimer(timerId, `–û—à–∏–±–∫–∞: ${error.message}`);
    const errorMsg = `‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`;
    SpreadsheetApp.getUi().alert(errorMsg);
    log(errorMsg);
  }
}

// –ê–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
const refreshProductsCache = forceRefreshCache;
const performanceTest = advancedPerformanceTest;
const showCacheStats = showPerformanceReport;

function testFind() {
  const ui = SpreadsheetApp.getUi();
  const res = ui.prompt("–í–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥ –¥–ª—è —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞:");
  if (res.getSelectedButton() !== ui.Button.OK) return;
  
  const barcode = res.getResponseText();
  if (!barcode) return;

  const startTime = Date.now();
  const product = findProductUltraFast(barcode);
  const searchTime = Date.now() - startTime;
  
  if (product) {
    ui.alert(`‚úÖ –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–´–ô –ü–û–ò–°–ö!\n–í—Ä–µ–º—è: ${searchTime}–º—Å\n\n–¢–æ–≤–∞—Ä: "${product.name}"\n–¶–µ–Ω–∞: ${product.price}\n–°—Ç—Ä–æ–∫–∞: ${product.row}`);
  } else {
    ui.alert(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞ ${searchTime}–º—Å\n\n–í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à?`);
  }
  
  log(`üîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ "${barcode}": ${searchTime}–º—Å, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${product ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
}

function showLogs() {
  const html = HtmlService.createHtmlOutputFromFile('Logs')
    .setTitle('üìã –õ–æ–≥–∏ (–£–ª—å—Ç—Ä–∞-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)')
    .setWidth(800)
    .setHeight(700);
  SpreadsheetApp.getUi().showModalDialog(html, '–î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
if (PRELOAD_ON_STARTUP && typeof ScriptApp !== 'undefined') {
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
  setTimeout(preloadData, 100);
}